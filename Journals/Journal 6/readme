# Lab 6: Stack Data Structure Implementation  

This project is part of **Lab 6**, where the focus is on the implementation and manipulation of the **stack** data structure. The goal is to understand the core functionality of stacks and how they can be used to solve various problems in programming.  

## Objective  

The goal of this lab is to:  
- Implement a **stack** data structure from scratch.  
- Understand and utilize the **LIFO (Last In, First Out)** principle.  
- Implement common stack operations and test them with different use cases.  

## Features  

- **Custom Stack Implementation:**  
  - Built from the ground up, without relying on any standard stack libraries.  
  - Implements all the core stack operations:  
    - **Push:** Add elements to the top of the stack.  
    - **Pop:** Remove elements from the top of the stack.  
    - **Peek/Top:** View the top element without removing it.  
    - **IsEmpty:** Check if the stack is empty.  
    - **Size:** Get the number of elements in the stack.  

## Lab Instructions  

1. Implement the **stack** data structure in C++ by using arrays or linked lists.  
2. Test the stack operations to ensure they work as expected:  
   - Adding and removing elements from the stack.  
   - Handling edge cases such as popping from an empty stack.  
3. Document the code with meaningful comments and clear variable names.  

## How to Run  

1. Clone the repository:  
   ```bash  
   git clone https://github.com/your-username/lab-6-stack.git  
   cd lab-6-stack  

